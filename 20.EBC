#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <openssl/aes.h>

// AES key for ECB mode (128 bits = 16 bytes)
unsigned char aes_key[] = "0123456789abcdef";

void print_hex(const char *label, const unsigned char *s, int len) {
    int i;
    printf("%s: ", label);
    for (i = 0; i < len; ++i)
        printf("%02x ", s[i]);
    printf("\n");
}

void encrypt_ecb(const unsigned char *plaintext, int plaintext_len, unsigned char *ciphertext) {
    AES_KEY enc_key;
    AES_set_encrypt_key(aes_key, 128, &enc_key);
    AES_encrypt(plaintext, ciphertext, &enc_key);
}

void decrypt_ecb(const unsigned char *ciphertext, int ciphertext_len, unsigned char *decryptedtext) {
    AES_KEY dec_key;
    AES_set_decrypt_key(aes_key, 128, &dec_key);
    AES_decrypt(ciphertext, decryptedtext, &dec_key);
}

int main() {
    // Example plaintext (must be a multiple of AES block size, 16 bytes)
    unsigned char plaintext[] = "Hello, world!!!";
    int plaintext_len = strlen((char *)plaintext);

    // Determine the required length for the ciphertext buffer
    int ciphertext_len = ((plaintext_len - 1) / AES_BLOCK_SIZE + 1) * AES_BLOCK_SIZE;
    unsigned char ciphertext[ciphertext_len];

    // Encrypt plaintext
    encrypt_ecb(plaintext, plaintext_len, ciphertext);

    // Print ciphertext in hexadecimal format
    print_hex("Ciphertext", ciphertext, ciphertext_len);

    // Decrypt ciphertext
    unsigned char decryptedtext[ciphertext_len];
    decrypt_ecb(ciphertext, ciphertext_len, decryptedtext);

    // Print decrypted plaintext
    printf("Decrypted text: %s\n", decryptedtext);

    return 0;
}
